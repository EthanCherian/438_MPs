// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package csce438;

import "google/protobuf/timestamp.proto";
import "snsCoordinator.proto";
import "google/protobuf/empty.proto";

// The messenger service definition.
service SNSService{
  rpc Login (Request) returns (Reply) {}
  rpc List (Request) returns (ListReply) {}
  rpc Follow (Request) returns (Reply) {}
  rpc Check(Request) returns (Reply) {}
  rpc Timeline (stream Message) returns (stream Message) {}
  rpc MakeMaster (snsCoordinator.Heartbeat) returns (google.protobuf.Empty) {}
  rpc SendSlave (snsCoordinator.Heartbeat) returns (Reply) {}
}

message Request {
  string user_id = 1;
  repeated string arguments = 2;
}

// The response definition
message Reply {
  string msg = 1;
  repeated string all_users = 2;
  repeated string following_users = 3;
}

message ListReply {
  repeated string all_users = 1;
  repeated string followers = 2;
}

message Message {
  //user_id who sent the message
  string user_id = 1;
  //Message from the user
  string msg = 2;
  //Time the message was sent
  google.protobuf.Timestamp timestamp = 3;
}

message Timeline {
  repeated Message messages = 1;
}

// server active status
enum UserStatus {
	INACTIVE = 0;
	ACTIVE = 1;
}

message User {
  string user_id = 1;
  repeated string following = 2;
  repeated string followers = 3;
  UserStatus status = 4;
}

message allUsers {
  repeated User users = 1;
}

